/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 .\public\horizontalTankModel\2Pales\HorizontalTankModel2Blades.glb 
*/

import React from 'react'
import { useGLTF } from '@react-three/drei'
import { useSpring, animated } from '@react-spring/three';

export default function HorizontalTankModel2Blades(props) {
  const { nodes, materials } = useGLTF('/horizontalTankModel/2Pales/HorizontalTankModel2Blades.glb')
  console.log(props);

  const getRotationDuration = (encoderData) => {
    if (encoderData === null) return 0; // 1 segundo
    const minDuration = 1000; // 1 segundo
    const maxDuration = 10000; // 10 segundos
    return minDuration + ((maxDuration - minDuration) * (100 - encoderData) / 100);
  };

  const getVisibleMilkCilinder = (quantity) => {
    if (quantity >= 0 && quantity < 12.5) return null;
    if (quantity >= 12.5 && quantity < 37.5) return <mesh geometry={nodes.MilkCilinder25.geometry} material={materials['MilkMaterial.001']} position={[-0.026, 2.389, -0.096]} scale={[2.531, 2.531, 2.615]} />
    if (quantity >= 37.5 && quantity < 62.5) return <mesh geometry={nodes.MilkCilinder50.geometry} material={materials['MilkMaterial.001']} position={[-0.026, 2.389, -0.096]} scale={[2.531, 2.531, 2.615]} />
    if (quantity >= 62.5 && quantity < 87.5) return <mesh geometry={nodes.MilkCilinder75.geometry} material={materials['MilkMaterial.001']} position={[-0.026, 2.389, -0.096]} scale={[2.531, 2.531, 2.615]} />
    if (quantity >= 87.5 && quantity <= 100) return <mesh geometry={nodes.MilkCilinder100.geometry} material={materials['MilkMaterial.001']} position={[-0.026, 2.389, -0.096]} scale={[2.531, 2.531, 2.615]} />
    
    return "Invalid value";
  };
  
  
  const rotationBlade1 = useSpring({
    loop: true,
    to: { rotation: [0, Math.PI * 2, 0] },
    from: { rotation: [0, 0, 0] },
    config: { duration: getRotationDuration(props.encoderData) },
  });

  const rotationBlade2 = useSpring({
    loop: true,
    to: { rotation: [0, -Math.PI * 2, 0] },
    from: { rotation: [0, 0, 0] },
    config: { duration: getRotationDuration(props.encoderData) },
  });
  
  return (
    <group {...props} dispose={null}>
      <animated.mesh geometry={nodes.Blade2.geometry} material={materials.BladeMaterial} position={[0, 1.529, 0.918]} scale={-0.148} rotation={rotationBlade1.rotation} />
      <animated.mesh geometry={nodes.Blade1.geometry} material={materials.BladeMaterial} position={[0, 1.529, -0.982]} scale={-0.148} rotation={rotationBlade2.rotation} />
      {getVisibleMilkCilinder(props.milkQuantityData.milkQuantity)}
      {/* <mesh geometry={nodes.Plano.geometry} material={nodes.Plano.material} position={[2, 2, -0.014]} scale={5.276} /> */}
      <mesh geometry={nodes.TankCilinder.geometry} material={materials.TankMaterial} position={[0.002, 2.043, 0.008]} scale={1.113} />
      <mesh geometry={nodes.Hatch.geometry} material={materials.HatchMaterial} position={[0, 3.257, 0]} scale={0.019} />
    </group>
  )
}

useGLTF.preload('/horizontalTankModel/2Pales/HorizontalTankModel2Blades.glb')
